import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    PicklePersistence
)
from telegram import ChatMember
from datetime import datetime, date, timedelta
import os
import sys
from dotenv import load_dotenv
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, ContextTypes
from typing import Dict, Any
from telegram.error import BadRequest, Forbidden

from docx import Document
from docx.shared import Pt, Cm
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_ALIGN_VERTICAL

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
current_dir = os.path.dirname(os.path.abspath(__file__))
# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.append(current_dir)

admins = [5012886318, 384221607, 491264374]

try:
    from bot5 import create_registration_doc
except ImportError as e:
    print(f"Error importing word_generator: {e}")
    print(f"Current directory: {current_dir}")
    print(f"Python path: {sys.path}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('6689906797:AAEKnJ1WtL7oiZGFnNd50tpHTsstXtcOvzM')
if not TOKEN:
    raise ValueError("No token provided! Add TELEGRAM_BOT_TOKEN to .env file.")

logger.info(f"Bot token loaded successfully")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
async def generate_registrations_doc(tournament, registrations_list, lang):
    try:
        filename = create_registration_doc(
            registrations=registrations_list,
            tournament_data=tournament,
            language=lang
        )
        return filename
    except Exception as e:
        logger.error(f"Error generating Word document: {e}")
        return None


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
SUBSCRIPTION = 12

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
SELECTING_LANGUAGE, SUBSCRIPTION, VIEWING_TOURNAMENTS, TOURNAMENT_DETAILS, DISCIPLINE_SELECT, REGION_SELECT, \
    INPUT_NAME, INPUT_BIRTH, GENDER_SELECT, WEIGHT_SELECT, INPUT_COACH, CONFIRM_DATA, EDIT_FIELD = range(13)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations = {
    'ru': {
        'select_language': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'russian': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'uzbek': 'üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π',
        'available_tournaments': '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:',
        'tournament_info': '''
*{name}*
üìÖ –î–∞—Ç–∞: {date}
üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {organizer}
üë• –í–æ–∑—Ä–∞—Å—Ç: {min_age}-{max_age} –ª–µ—Ç
''',
        'register_button': 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
        'back_button': '¬´ –ù–∞–∑–∞–¥',
        'select_discipline': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:',
        'self_defense': '–°–∞–º–æ–æ–±–æ—Ä–æ–Ω–∞',
        'combat': '–ü–æ–µ–¥–∏–Ω–æ–∫',
        'select_region': '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:',
        'enter_name': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ) –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ:',
        'enter_birth': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 15.03.2010',
        'select_gender': '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
        'male': '–ú—É–∂—á–∏–Ω–∞',
        'female': '–ñ–µ–Ω—â–∏–Ω–∞',
        'select_weight': '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≤–µ—Å–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        'enter_coach': '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –≤–∞—à–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):',
        'invalid_date': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 15.03.2011',
        'age_error': '–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ç—É—Ä–Ω–∏—Ä–∞ (–æ—Ç {min_age} –¥–æ {max_age} –ª–µ—Ç).\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        'registration_closed': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä –∑–∞–∫—Ä—ã—Ç–∞. –û–Ω–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∑–∞ –Ω–µ–¥–µ–ª—é –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.',
        'registration_summary': '''
*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*
üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament}
üéØ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {discipline}
üåç –†–µ–≥–∏–æ–Ω: {region}
üë§ –§–ò–û: {name}
üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}
üë´ –ü–æ–ª: {gender}
‚öñÔ∏è –í–µ—Å: {weight}
üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {coach}
''',
        'confirm_correct': '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ',
        'restart': 'üîÑ –ó–∞–Ω–æ–≤–æ',
        'final_confirm': '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?',
        'yes': '–î–∞ ‚úÖ',
        'no': '–ù–µ—Ç ‚ùå',
        'registration_complete': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ',
        'start_new': '–î–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start',
        'error_message': '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        'name_already_registered': '–§–ò–û "{name}" —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –§–ò–û.',
        'subscribe_message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: https://t.me/fedrpo',
        'subscribe_button': '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
        'subscribe_confirm_button': '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ',
    },
    'uz': {
        'select_language': 'Tilni tanlang:',
        'russian': 'üá∑üá∫ Ruscha',
        'uzbek': 'üá∫üáø O\'zbekcha',
        'available_tournaments': 'Mavjud musobaqalar:',
        'tournament_info': '''
*{name}*
üìÖ Sana: {date}
üè¢ Tashkilotchi: {organizer}
üë• Yosh: {min_age}-{max_age} yosh
''',
        'register_button': 'üìù Ro\'yxatdan o\'tish',
        'back_button': '¬´ Orqaga',
        'select_discipline': 'Displinani tanlang:',
        'self_defense': 'O\'zini o\'zi himoya qilish',
        'combat': 'Jang',
        'select_region': 'Viloyatingizni ro\'yxatdan tanlang:',
        'enter_name': 'To\'liq F.I.O kiriting (Familiya Ism Sharif) lotincha:',
        'enter_birth': 'Tug\'ilgan sanangizni DD.MM.YYYY formatida kiriting\nMasalan: 15.03.2011',
        'select_gender': 'Jinsingizni tanlang:',
        'male': 'Erkak',
        'female': 'Ayol',
        'select_weight': 'Vazn toifangizni tanlang:',
        'enter_coach': 'Murabbiyingizning to\'liq F.I.O kiriting (Familiya Ism Sharif):',
        'invalid_date': 'Noto\'g\'ri sana. Iltimos, sanani DD.MM.YYYY formatida kiriting\nMasalan: 15.03.2010',
        'age_error': 'Yoshingiz musobaqa talablariga mos kelmaydi ({min_age} dan {max_age} yoshgacha).\nRo\'yxatdan o\'tish bekor qilindi.',
        'registration_closed': 'Ushbu musobaqaga ro\'yxatdan o\'tish yopilgan. Musobaqadan bir hafta oldin yopiladi.',
        'registration_summary': '''
*Ma\'lumotlarni tekshiring:*
üèÜ Musobaqa: {tournament}
üéØ Disiplina: {discipline}
üåç Viloyat: {region}
üë§ F.I.O: {name}
üìÖ Tug\'ilgan sana: {birth_date}
üë´ Jins: {gender}
‚öñÔ∏è Vazn: {weight}
üë®‚Äçüè´ Murabbiy: {coach}
''',
        'confirm_correct': '‚úÖ Hammasi to\'g\'ri',
        'restart': 'üîÑ Qayta boshlash',
        'final_confirm': 'Ro\'yxatdan o\'tishni tasdiqlaysizmi?',
        'yes': 'Ha ‚úÖ',
        'no': 'Yo\'q ‚ùå',
        'registration_complete': 'Ro\'yxatdan o\'tish muvaffaqiyatli yakunlandi! ‚úÖ',
        'start_new': 'Yangi ro\'yxatdan o\'tish uchun /start buyrug\'idan foydalaning',
        'error_message': 'Xatolik yuz berdi. Iltimos, qaytadan urinib ko\'ring.',
        'name_already_registered': 'F.I.O "{name}" allaqachon ro\'yxatdan o\'tgan. Iltimos, boshqa F.I.O kiriting.',
        'subscribe_message': 'Iltimos, davom etish uchun kanalimizga obuna bo\'ling: https://t.me/fedrpo',
        'subscribe_button': 'Obuna bo\'lish',
        'subscribe_confirm_button': 'Men obuna bo\'ldim ‚úÖ',
    }
}

# –†–µ–≥–∏–æ–Ω—ã
regions = [
    {"id": "toshkent viloyati", "nameRu": "–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Ç—å", "nameUz": "Toshkent viloyati"},
    {"id": "toshkent shahri", "nameRu": "–ì–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç", "nameUz": "Toshkent shahri"},
    {"id": "andijan", "nameRu": "–ê–Ω–¥–∏–∂–∞–Ω", "nameUz": "Andijon"},
    {"id": "bukhara", "nameRu": "–ë—É—Ö–∞—Ä–∞", "nameUz": "Buxoro"},
    {"id": "fergana", "nameRu": "–§–µ—Ä–≥–∞–Ω–∞", "nameUz": "Farg'ona"},
    {"id": "jizzakh", "nameRu": "–î–∂–∏–∑–∞–∫", "nameUz": "Jizzax"},
    {"id": "namangan", "nameRu": "–ù–∞–º–∞–Ω–≥–∞–Ω", "nameUz": "Namangan"},
    {"id": "navoiy", "nameRu": "–ù–∞–≤–æ–∏", "nameUz": "Navoiy"},
    {"id": "qashqadaryo", "nameRu": "–ö–∞—à–∫–∞–¥–∞—Ä—å—è", "nameUz": "Qashqadaryo"},
    {"id": "samarkand", "nameRu": "–°–∞–º–∞—Ä–∫–∞–Ω–¥", "nameUz": "Samarqand"},
    {"id": "sirdaryo", "nameRu": "–°—ã—Ä–¥–∞—Ä—å—è", "nameUz": "Sirdaryo"},
    {"id": "surxondaryo", "nameRu": "–°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å—è", "nameUz": "Surxondaryo"},
    {"id": "xorazm", "nameRu": "–•–æ—Ä–µ–∑–º", "nameUz": "Xorazm"},
    {"id": "Qoraqalpog'ison", "nameRu": "–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω", "nameUz": "Qoraqalpog'ison"},
    {"id": "IIV", "nameRu": "–ú–í–î", "nameUz": "IIV"},
    {"id": "MG", "nameRu": "–ù–ì", "nameUz": "MG"},
    {"id": "MV", "nameRu": "–ú–û", "nameUz": "MV"},
    {"id": "FVV", "nameRu": "–ú–ß–°", "nameUz": "FVV"},
    {"id": "DBQ", "nameRu": "–ì–¢–ö", "nameUz": "DBQ"},
    {"id": "PDXX", "nameRu": "–°–ì–ë–ü", "nameUz": "PDXX"},
    {"id": "DXX", "nameRu": "–°–ì–ë", "nameUz": "DXX"},
    {"id": "DXX ChQ", "nameRu": "–ü–í –°–ì–ë", "nameUz": "DXX ChQ"},
    {"id": "IVV QQ", "nameRu": "–ö–í –ú–í–î", "nameUz": "IVV QQ"},
    {"id": "IIV Akademiyasi", "nameRu": "–ê–∫–∞–¥–µ–º–∏—è –ú–í–î", "nameUz": "IIV Akademiyasi"},
    {"id": "MG JXU", "nameRu": "–£–û–ë –ù–ì", "nameUz": "MG JXU"},
    {"id": "MV QK Akademiyasi", "nameRu": "–ê–í–° –ú–û", "nameUz": "MV QK Akademiyasi"},

]

# –í–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–∞–ª—å—á–∏–∫–æ–≤ –∏ –¥–µ–≤–æ—á–µ–∫
weight_categories = {
    'male': ["21kg", "24kg", "27kg", "30kg", "33kg", "35kg", "38kg", "41kg", "44kg", "48kg", "52kg", "+52kg", "53kg",
             "57kg", "58kg", "62kg", "64kg", "67kg", "+67kg", "+70kg", "73kg", "80kg", "88kg", "97kg", "+97kg", ],
    'female': ["21kg", "24kg", "27kg", "30kg", "33kg", "35kg", "38kg", "+38kg", "48kg", "53kg", "58kg", "64kg", "70kg",
               "+70kg", ]
}

# –¢—É—Ä–Ω–∏—Ä—ã
tournaments = [
    {
        "id": 1,
        "nameRu": "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        "nameUz": "O'zbekiston Chempionati",
        "date": "08.04.2025",
        "organizerRu": "–§–µ–¥–µ—Ä–∞—Ü–∏—è –†—É–∫–æ–ø–∞—à–Ω–æ–≥–æ –ë–æ—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        "organizerUz": "O'zbekiston Qo'l Jangi Federatsiyasi",
        "minAge": 10,
        "maxAge": 100
    },
    {
        "id": 2,
        "nameRu": "–ö—É–±–æ–∫ –¢–∞—à–∫–µ–Ω—Ç–∞",
        "nameUz": "Toshkent kubogi",
        "date": "20.06.2024",
        "organizerRu": "–§–µ–¥–µ—Ä–∞—Ü–∏—è –†—É–∫–æ–ø–∞—à–Ω–æ–≥–æ –ë–æ—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
        "organizerUz": "O'zbekiston Qo'l Jangi Federatsiyasi",
        "minAge": 14,
        "maxAge": 18
    }
]

# –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
registrations = []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_registrations():
    global registrations
    if os.path.exists("registrations.json"):
        with open("registrations.json", "r", encoding="utf-8") as file:
            registrations = json.load(file)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ —Ñ–∞–π–ª
def save_registrations():
    with open("registrations.json", "w", encoding="utf-8") as file:
        json.dump(registrations, file, ensure_ascii=False, indent=4)


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_registrations()


def get_text(key: str, lang: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
    return translations.get(lang, {}).get(key, "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


def get_region_name(region_id: str, lang: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"""
    region = next((r for r in regions if r['id'] == region_id), None)
    return region[f'name{lang.capitalize()}'] if region else region_id


def is_registration_open(tournament_date: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä"""
    try:
        tournament_date = datetime.strptime(tournament_date, "%d.%m.%Y").date()
        return (tournament_date - date.today()) > timedelta(days=7)
    except Exception as e:
        logger.error(f"Error checking registration date: {e}")
        return False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    try:
        context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru'),
                InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data='lang_uz')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
            reply_markup=reply_markup
        )
        return SELECTING_LANGUAGE
    except Exception as e:
        logger.error(f"Error in start: {e}")
        await update.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    try:
        query = update.callback_query
        await query.answer()

        lang = query.data.split('_')[1]
        context.user_data['language'] = lang

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        keyboard = [
            [InlineKeyboardButton(get_text('subscribe_button', lang), url='https://t.me/fedrpo')],
            # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
            [InlineKeyboardButton(get_text('subscribe_confirm_button', lang), callback_data='subscribed')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=get_text('subscribe_message', lang),
            reply_markup=reply_markup
        )
        return SUBSCRIPTION
    except Exception as e:
        logger.error(f"Error in language_selected: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()

        lang = context.user_data['language']

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        keyboard = []
        for tournament in tournaments:
            name = tournament[f'name{lang.capitalize()}']
            keyboard.append([InlineKeyboardButton(
                name, callback_data=f"tournament_{tournament['id']}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=get_text('available_tournaments', lang),
            reply_markup=reply_markup
        )
        return VIEWING_TOURNAMENTS
    except Exception as e:
        logger.error(f"Error in handle_subscription: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def show_tournament_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    try:
        query = update.callback_query
        await query.answer()

        lang = context.user_data['language']
        tournament_id = int(query.data.split('_')[1])
        tournament = next((t for t in tournaments if t['id'] == tournament_id), None)

        if not tournament:
            await query.edit_message_text("Tournament not found")
            return VIEWING_TOURNAMENTS

        context.user_data['tournament'] = tournament

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        if not is_registration_open(tournament['date']):
            keyboard = [
                [InlineKeyboardButton(get_text('back_button', lang), callback_data="back_to_tournaments")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(get_text('registration_closed', lang), reply_markup=reply_markup)
            return VIEWING_TOURNAMENTS  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        info = get_text('tournament_info', lang).format(
            name=tournament[f'name{lang.capitalize()}'],
            date=tournament['date'],
            organizer=tournament[f'organizer{lang.capitalize()}'],
            min_age=tournament['minAge'],
            max_age=tournament['maxAge']
        )

        keyboard = [
            [InlineKeyboardButton(get_text('register_button', lang), callback_data=f"register_{tournament['id']}")],
            [InlineKeyboardButton(get_text('back_button', lang), callback_data="back_to_tournaments")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=info,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return TOURNAMENT_DETAILS
    except Exception as e:
        logger.error(f"Error in show_tournament_details: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        info = get_text('tournament_info', lang).format(
            name=tournament[f'name{lang.capitalize()}'],
            date=tournament['date'],
            organizer=tournament[f'organizer{lang.capitalize()}'],
            min_age=tournament['minAge'],
            max_age=tournament['maxAge']
        )

        keyboard = [
            [InlineKeyboardButton(get_text('register_button', lang), callback_data=f"register_{tournament['id']}")],
            [InlineKeyboardButton(get_text('back_button', lang), callback_data='back_to_tournaments')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=info,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return TOURNAMENT_DETAILS
    except Exception as e:
        logger.error(f"Error in show_tournament_details: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        query = update.callback_query
        await query.answer()

        lang = context.user_data['language']

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(get_text('self_defense', lang), callback_data='discipline_self_defense')],
            [InlineKeyboardButton(get_text('combat', lang), callback_data='discipline_combat')],
            [InlineKeyboardButton(get_text('back_button', lang), callback_data='back_to_tournament')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=get_text('select_discipline', lang),
            reply_markup=reply_markup
        )
        return DISCIPLINE_SELECT
    except Exception as e:
        logger.error(f"Error in start_registration: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def discipline_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    try:
        query = update.callback_query
        await query.answer()

        discipline = query.data.split('_')[1]
        context.user_data['discipline'] = discipline

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"Selected discipline: {discipline}")
        logger.info(f"Current user_data: {context.user_data}")

        lang = context.user_data['language']

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        keyboard = []
        row = []
        for i, region in enumerate(regions):
            row.append(InlineKeyboardButton(
                region[f'name{lang.capitalize()}'],
                callback_data=f"region_{region['id']}"
            ))
            if len(row) == 2 or i == len(regions) - 1:
                keyboard.append(row)
                row = []

        keyboard.append([InlineKeyboardButton(
            get_text('back_button', lang),
            callback_data="back_to_discipline"
        )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=get_text('select_region', lang),
            reply_markup=reply_markup
        )
        return REGION_SELECT
    except Exception as e:
        logger.error(f"Error in discipline_selected: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def region_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    try:
        query = update.callback_query
        await query.answer()

        region_id = query.data.split('_')[1]
        context.user_data['region'] = region_id

        lang = context.user_data['language']
        await query.edit_message_text(get_text('enter_name', lang))
        return INPUT_NAME
    except Exception as e:
        logger.error(f"Error in region_selected: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    try:
        name = update.message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –§–ò–û —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞
        if len(name.split()) < 2:
            lang = context.user_data['language']
            await update.message.reply_text(get_text('enter_name', lang))
            return INPUT_NAME

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –§–ò–û –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ –æ–¥–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
        tournament_id = context.user_data['tournament']['id']
        discipline = context.user_data['discipline']
        for reg in registrations:
            if (reg['tournamentId'] == tournament_id and
                    reg['discipline'] == discipline and
                    reg['fullName'].lower() == name.lower()):
                lang = context.user_data['language']
                await update.message.reply_text(
                    get_text('name_already_registered', lang).format(name=name))
                return INPUT_NAME

        context.user_data['name'] = name
        lang = context.user_data['language']

        await update.message.reply_text(get_text('enter_birth', lang))
        return INPUT_BIRTH
    except Exception as e:
        logger.error(f"Error in process_name: {e}")
        await update.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def process_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        lang = context.user_data['language']

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        birth_date = datetime.strptime(update.message.text, "%d.%m.%Y").date()
        tournament = context.user_data['tournament']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        age = (date.today() - birth_date).days // 365
        if age < tournament['minAge'] or age > tournament['maxAge']:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
            error_message = get_text('age_error', lang).format(
                min_age=tournament['minAge'],
                max_age=tournament['maxAge']
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton(get_text('back_button', lang), callback_data="back_to_tournaments")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                error_message,
                reply_markup=reply_markup
            )
            return VIEWING_TOURNAMENTS  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤
        else:
            # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            context.user_data['birth_date'] = update.message.text

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª–∞
            keyboard = [
                [InlineKeyboardButton(get_text('male', lang), callback_data='gender_male')],
                [InlineKeyboardButton(get_text('female', lang), callback_data='gender_female')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                get_text('select_gender', lang),
                reply_markup=reply_markup
            )
            return GENDER_SELECT
    except ValueError:
        await update.message.reply_text(get_text('invalid_date', lang))
        return INPUT_BIRTH
    except Exception as e:
        logger.error(f"Error in process_birth_date: {e}")
        await update.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def gender_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    try:
        query = update.callback_query
        await query.answer()

        gender = query.data.split('_')[1]
        context.user_data['gender'] = gender

        lang = context.user_data['language']

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–µ—Å–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∞
        weights = weight_categories[gender]
        keyboard = []
        row = []
        for i, weight in enumerate(weights):
            row.append(InlineKeyboardButton(
                weight,
                callback_data=f"weight_{weight}"
            ))
            if len(row) == 3 or i == len(weights) - 1:
                keyboard.append(row)
                row = []

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            get_text('select_weight', lang),
            reply_markup=reply_markup
        )
        return WEIGHT_SELECT
    except Exception as e:
        logger.error(f"Error in gender_selected: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def weight_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        query = update.callback_query
        await query.answer()

        weight = query.data.split('_')[1]
        context.user_data['weight'] = weight

        lang = context.user_data['language']
        await query.edit_message_text(get_text('enter_coach', lang))
        return INPUT_COACH
    except Exception as e:
        logger.error(f"Error in weight_selected: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def process_coach(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    try:
        coach = update.message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –§–ò–û —Ç—Ä–µ–Ω–µ—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞
        if len(coach.split()) < 2:
            lang = context.user_data['language']
            await update.message.reply_text(get_text('enter_coach', lang))
            return INPUT_COACH

        context.user_data['coach'] = coach
        lang = context.user_data['language']

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"Current user_data before summary: {context.user_data}")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        discipline_key = context.user_data['discipline']
        discipline_text = get_text(discipline_key, lang)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        logger.info(f"Discipline key: {discipline_key}, Discipline text: {discipline_text}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        tournament = context.user_data['tournament']
        summary = get_text('registration_summary', lang).format(
            tournament=tournament[f'name{lang.capitalize()}'],
            discipline=discipline_text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            region=get_region_name(context.user_data['region'], lang),
            name=context.user_data['name'],
            birth_date=context.user_data['birth_date'],
            gender=get_text(context.user_data['gender'], lang),
            weight=context.user_data['weight'],
            coach=context.user_data['coach']
        )

        keyboard = [
            [
                InlineKeyboardButton(get_text('confirm_correct', lang),
                                     callback_data='confirm_correct'),
                InlineKeyboardButton(get_text('restart', lang),
                                     callback_data='restart')
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            summary,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return CONFIRM_DATA
    except Exception as e:
        logger.error(f"Error in process_coach: {e}")
        await update.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        query = update.callback_query
        await query.answer()

        lang = context.user_data['language']

        if query.data == 'restart':
            # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
            context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await query.edit_message_text(get_text('start_new', lang))
            return await start(update, context)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = [
                [
                    InlineKeyboardButton(get_text('yes', lang),
                                         callback_data='final_confirm_yes'),
                    InlineKeyboardButton(get_text('no', lang),
                                         callback_data='final_confirm_no')
                ]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                get_text('final_confirm', lang),
                reply_markup=reply_markup
            )
            return CONFIRM_DATA
    except Exception as e:
        logger.error(f"Error in handle_confirmation: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def handle_final_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()

        lang = context.user_data['language']

        if query.data == 'final_confirm_yes':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            registration = {
                "tournamentId": context.user_data['tournament']['id'],
                "discipline": context.user_data['discipline'],
                "region": context.user_data['region'],
                "fullName": context.user_data['name'],
                "birthDate": context.user_data['birth_date'],
                "gender": context.user_data['gender'],
                "weightCategory": context.user_data['weight'],
                "coachName": context.user_data['coach'],
                "createdAt": datetime.now().isoformat()
            }
            registrations.append(registration)
            save_registrations()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
            generated_doc = await generate_registrations_doc(context.user_data['tournament'], registrations, lang)
            if not generated_doc:
                logger.error("Failed to generate registration document")
            else:
                logger.info(f"Document generated successfully: {generated_doc}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.edit_message_text(get_text('registration_complete', lang))
            await query.message.reply_text(get_text('start_new', lang))
            return ConversationHandler.END
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–≤–æ–¥–∫–µ
            return await process_coach(update, context)
    except Exception as e:
        logger.error(f"Error in handle_final_confirmation: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def back_to_tournaments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    try:
        query = update.callback_query
        await query.answer()

        lang = context.user_data.get('language', 'ru')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        keyboard = []
        for tournament in tournaments:
            name = tournament[f'name{lang.capitalize()}']
            keyboard.append([InlineKeyboardButton(
                name, callback_data=f"tournament_{tournament['id']}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=get_text('available_tournaments', lang),
            reply_markup=reply_markup
        )
        return VIEWING_TOURNAMENTS
    except Exception as e:
        logger.error(f"Error in back_to_tournaments: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def back_to_tournament(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º —Ç—É—Ä–Ω–∏—Ä–∞"""
    try:
        query = update.callback_query
        await query.answer()
        logger.info("Back to tournament button pressed")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

        lang = context.user_data.get('language', 'ru')
        tournament = context.user_data.get('tournament')

        if not tournament:
            await query.edit_message_text(get_text('error_message', lang))
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        info = get_text('tournament_info', lang).format(
            name=tournament[f'name{lang.capitalize()}'],
            date=tournament['date'],
            organizer=tournament[f'organizer{lang.capitalize()}'],
            min_age=tournament['minAge'],
            max_age=tournament['maxAge']
        )

        keyboard = [
            [InlineKeyboardButton(get_text('register_button', lang), callback_data=f"register_{tournament['id']}")],
            [InlineKeyboardButton(get_text('back_button', lang), callback_data="back_to_tournaments")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=info,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return TOURNAMENT_DETAILS
    except Exception as e:
        logger.error(f"Error in back_to_tournament: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def back_to_discipline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    try:
        query = update.callback_query
        await query.answer()
        logger.info("Back to discipline button pressed")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

        lang = context.user_data.get('language', 'ru')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(get_text('self_defense', lang), callback_data='discipline_self_defense')],
            [InlineKeyboardButton(get_text('combat', lang), callback_data='discipline_combat')],
            [InlineKeyboardButton(get_text('back_button', lang), callback_data='back_to_tournament')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=get_text('select_discipline', lang),
            reply_markup=reply_markup
        )
        return DISCIPLINE_SELECT
    except Exception as e:
        logger.error(f"Error in back_to_discipline: {e}")
        await update.callback_query.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def clear_command(update:Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if update.effective_user.id not in admins:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    os.remove('registrations.json')
    await update.message.reply_text('registration.json was cleared')



async def download_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if update.effective_user.id not in admins:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        if not os.path.exists("registrations.json"):
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö.")
            return

        with open("registrations.json", "r", encoding="utf-8") as file:
            registrations_data = json.load(file)

        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç—É—Ä–Ω–∏—Ä
        tournament_data = next((t for t in tournaments if t['id'] == 1), None)
        if not tournament_data:
            await update.message.reply_text("–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        filename = create_doc(tournament_data, registrations_data, 'ru')
        
        if not filename:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        with open(filename, 'rb') as doc:
            await update.message.reply_document(
                document=doc,
                filename=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏_{datetime.now().strftime('%Y%m%d_%H%M')}.docx"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)

    except Exception as e:
        logger.error(f"Error in download_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


def create_doc(registrations, tournament_data, language='ru'):
    """
    –°–æ–∑–¥–∞–µ—Ç Word –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
    Args:
        registrations: —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        tournament_data: –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        language: —è–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ('ru' –∏–ª–∏ 'uz')
    Returns:
        str: –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    try:
        doc = Document()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        sections = doc.sections
        for section in sections:
            section.top_margin = Cm(2)
            section.bottom_margin = Cm(2)
            section.left_margin = Cm(2)
            section.right_margin = Cm(2)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        title = doc.add_paragraph()
        title_run = title.add_run(f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - {tournament_data[f'name{language.capitalize()}']}")
        title_run.font.size = Pt(14)
        title_run.font.bold = True
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        info = doc.add_paragraph()
        info.add_run(f"–î–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament_data['date']}\n")
        info.add_run(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {tournament_data[f'organizer{language.capitalize()}']}")
        info.alignment = WD_ALIGN_PARAGRAPH.LEFT

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        disciplines = {
            'self_defense': '–°–∞–º–æ–æ–±–æ—Ä–æ–Ω–∞',
            'combat': '–ü–æ–µ–¥–∏–Ω–æ–∫'
        }

        for disc_key, disc_name in disciplines.items():
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
            disc_registrations = [r for r in registrations if r['discipline'] == disc_key]

            if disc_registrations:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
                doc.add_paragraph().add_run(f"\n{disc_name}").bold = True

                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                table = doc.add_table(rows=1, cols=7)
                table.style = 'Table Grid'

                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                headers = ['‚Ññ', '–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–†–µ–≥–∏–æ–Ω', '–ü–æ–ª', '–í–µ—Å', '–¢—Ä–µ–Ω–µ—Ä']
                header_cells = table.rows[0].cells
                for i, header in enumerate(headers):
                    header_cells[i].text = header
                    header_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    header_cells[i].vertical_alignment = WD_ALIGN_VERTICAL.CENTER

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
                for idx, reg in enumerate(disc_registrations, 1):
                    row_cells = table.add_row().cells

                    # –ù–æ–º–µ—Ä
                    row_cells[0].text = str(idx)
                    row_cells[0].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                    # –§–ò–û
                    row_cells[1].text = reg['fullName']

                    # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
                    row_cells[2].text = reg['birthDate']
                    row_cells[2].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                    # –†–µ–≥–∏–æ–Ω
                    region = next((r for r in regions if r['id'] == reg['region']), None)
                    row_cells[3].text = region[f'name{language.capitalize()}'] if region else reg['region']

                    # –ü–æ–ª
                    row_cells[4].text = '–ú—É–∂—Å–∫–æ–π' if reg['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'
                    row_cells[4].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                    # –í–µ—Å
                    row_cells[5].text = reg['weightCategory']
                    row_cells[5].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                    # –¢—Ä–µ–Ω–µ—Ä
                    row_cells[6].text = reg['coachName']

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
                widths = [1, 4, 2, 3, 1.5, 1.5, 4]
                for i, width in enumerate(widths):
                    for cell in table.columns[i].cells:
                        cell.width = Cm(width)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        filename = f"registrations_{datetime.now().strftime('%Y%m%d_%H%M')}.docx"
        doc.save(filename)
        return filename

    except Exception as e:
        return None


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        lang = context.user_data.get('language', 'ru')
        await update.message.reply_text(get_text('start_new', lang))
        context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel: {e}")
        await update.message.reply_text(get_text('error_message', 'ru'))
        return ConversationHandler.END


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")
    try:
        if "Conflict: terminated by other getUpdates request" in str(context.error):
            logger.warning("Detected multiple bot instances, attempting to recover...")
            return

        if update and update.effective_message:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start"
            )
    except Exception as e:
        logger.error(f"Error in error handler: {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª bot_data –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
        if os.path.exists("bot_data"):
            os.remove("bot_data")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder() \
            .token(TOKEN) \
            .persistence(PicklePersistence(filepath="bot_data")) \
            .build()

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                SELECTING_LANGUAGE: [
                    CallbackQueryHandler(language_selected, pattern='^lang_')
                ],
                SUBSCRIPTION: [
                    CallbackQueryHandler(handle_subscription, pattern='^subscribed$')
                ],
                VIEWING_TOURNAMENTS: [
                    CallbackQueryHandler(show_tournament_details, pattern='^tournament_'),
                    CallbackQueryHandler(back_to_tournaments, pattern='^back_to_tournaments$')
                ],
                TOURNAMENT_DETAILS: [
                    CallbackQueryHandler(start_registration, pattern='^register_'),
                    CallbackQueryHandler(back_to_tournaments, pattern='^back_to_tournaments$')
                ],
                DISCIPLINE_SELECT: [
                    CallbackQueryHandler(discipline_selected, pattern='^discipline_'),
                    CallbackQueryHandler(back_to_tournament, pattern='^back_to_tournament$')
                ],
                REGION_SELECT: [
                    CallbackQueryHandler(region_selected, pattern='^region_'),
                    CallbackQueryHandler(back_to_discipline, pattern='^back_to_discipline$')
                ],
                INPUT_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_name)
                ],
                INPUT_BIRTH: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_birth_date)
                ],
                GENDER_SELECT: [
                    CallbackQueryHandler(gender_selected, pattern='^gender_')
                ],
                WEIGHT_SELECT: [
                    CallbackQueryHandler(weight_selected, pattern='^weight_')
                ],
                INPUT_COACH: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_coach)
                ],
                CONFIRM_DATA: [
                    CallbackQueryHandler(handle_confirmation, pattern='^confirm_'),
                    CallbackQueryHandler(handle_final_confirmation, pattern='^final_confirm_')
                ],
            },
            fallbacks=[
                CommandHandler('start', start),  # /start –∫–∞–∫ fallback
                CommandHandler('cancel', cancel)
            ],
            name="tournament_registration",
            persistent=True
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(conv_handler)
        application.add_error_handler(error_handler)
        application.add_handler(CommandHandler('download', download_command))
        application.add_handler(CommandHandler('clear', clear_command))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting bot...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Error in main: {e}")


if __name__ == '__main__':
    main()
